<div class="container">
  <div class="container diary-post-div black">
    <form action="/add-diary" method="post" autocomplete="off">
      <div>
        <label for="diaryTitle">Story Title:
        </label>
        <input required type="text" name="diaryTitle" class="form-control mb-3">
      </div>
      <div class="text-box mb-2">
        <div id="editor">
          <p>Hello World!</p>
          <p><br></p>
        </div>
      </div>
      <div class="row">
        <div class="col-sm form-group autocomplete">
          <label for="category">Category</label>
          <input required type="text" name="category" class="form-control " id="myInput">
        </div>
        <div class="col-sm form-group">
          <label for="timeSpent">Time spent</label>
          <input required type="Number" name="timeSpent" id="timeSpent" class="form-control">
        </div>
        <div class="col-sm form-group">
          <label for="difficulty">Difficulty</label>
          <select name="difficulty" id="difficulty" class="form-control">
            <option value="1">Easy</option>
            <option value="2">Medium</option>
            <option value="3">Challenging</option>
            <option value="4">Hard</option>
            <option value="5">Very hard</option>
          </select>
        </div>
      </div>
      <div class="row">
        <div class="col-sm form-group">
          <label for="sourceType">Source type</label>
          <select name="sourceType" id="sourceType" class="form-control form-control">
            <option value="book">Book</option>
            <option value="video">Video</option>
            <option value="article">Article</option>
            <option value="course">Course</option>
            <option value="other">Other</option>
          </select>
        </div>
        <div class="col-sm form-group">
          <label for="sourceTitle">Source title</label>
          <input type="text" name="sourceTitle" id="sourceTitle" class="form-control">
        </div>
        <div class="col-sm form-group">
          <label for="sourceLink">Source link</label>
          <input type="text" name="sourceLink" id="sourceLink" class="form-control">
        </div>
      </div>
      <div class="d-flex justify-content-center pt-3 pb-1">
        <input type="hidden" name="description">
        <button type="submit" class="btn addbutton btn-color btn-lg btn-block ">Add Story</button>
      </div>
    </form>
  </div>
  {{!-- <a href="/new-story/?sort=category">category</a>
  <a href="/new-story/?sort=timeSpent">time spent</a>
  <a href="/new-story/?sort=created_at">latest</a> --}}

  {{#each diaries}}
  <div class="container">
    <div class=" remove-padding special">
      <div class=" remove-padding story-card card">
        <div class="nav card-header justify-content-between">
          <div class="parag">
            <p><strong class="blue">
                <</strong> <strong class="pink"> {{this.category}}
              </strong><strong class="blue">
                ></strong> </p>
          </div>
          <div>
            <ul class="nav">
              <li class="nav-item pr-4">Difficulty:
                {{difficiltyNumber2String this.difficulty}}</li>
              <li class="nav-item pr-4">{{this.timeSpent}} min</li>
              <li class="nav-item pr-4">{{dateOfCreate this.created_at}}</li>
            </ul>
          </div>
        </div>
        <div class="container nav card-body justify-content-between">
          <div class="nav-item">
            <h5 class="card-title">{{this.diaryTitle}}</h5>
            <p class="card-text">{{{this.description}}}</p>
          </div>
          <div class="nav-item">
            <a href="/edit-story/{{this._id}}" class="btn btn-outline-success">Edit</a>
            <a href="/delete-story/{{this._id}}" class="btn btn-outline-danger">Delete</a>
          </div>
        </div>
      </div>
    </div>
  </div>

  {{/each}}
</div>


<script>
  function autocomplete(inp, arr) {
    /*the autocomplete function takes two arguments,
    the text field element and an array of possible autocompleted values:*/
    var currentFocus;
    /*execute a function when someone writes in the text field:*/
    inp.addEventListener("input", function (e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false; }
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items d-flex flex-column justify-content-center align-items-stretch pr-3 pl-3");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
          b.addEventListener("click", function (e) {
            /*insert the value for the autocomplete text field:*/
            inp.value = this.getElementsByTagName("input")[0].value;
            /*close the list of autocompleted values,
            (or any other open lists of autocompleted values:*/
            closeAllLists();
          });
          a.appendChild(b);
        }
      }
    });
    /*execute a function presses a key on the keyboard:*/
    inp.addEventListener("keydown", function (e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
    });
    function addActive(x) {
      /*a function to classify an item as "active":*/
      if (!x) return false;
      /*start by removing the "active" class on all items:*/
      removeActive(x);
      if (currentFocus >= x.length) currentFocus = 0;
      if (currentFocus < 0) currentFocus = (x.length - 1);
      /*add class "autocomplete-active":*/
      x[currentFocus].classList.add("autocomplete-active");
    }
    function removeActive(x) {
      /*a function to remove the "active" class from all autocomplete items:*/
      for (var i = 0; i < x.length; i++) {
        x[i].classList.remove("autocomplete-active");
      }
    }
    function closeAllLists(elmnt) {
      /*close all autocomplete lists in the document,
      except the one passed as an argument:*/
      var x = document.getElementsByClassName("autocomplete-items");
      for (var i = 0; i < x.length; i++) {
        if (elmnt != x[i] && elmnt != inp) {
          x[i].parentNode.removeChild(x[i]);
        }
      }
    }
    /*execute a function when someone clicks in the document:*/
    document.addEventListener("click", function (e) {
      closeAllLists(e.target);
    });
  }
  var keywords = ["Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "Anguilla", "Antigua &amp; Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bosnia &amp; Herzegovina", "Botswana", "Brazil", "British Virgin Islands", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central Arfrican Republic", "Chad", "Chile", "China", "Colombia", "Congo", "Cook Islands", "Costa Rica", "Cote D Ivoire", "Croatia", "Cuba", "Curacao", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands", "Faroe Islands", "Fiji", "Finland"]
  autocomplete(document.getElementById("myInput"), keywords);
  var quill = new Quill('#editor', {
    theme: 'snow'
  });
  // Listen for submit events of the form
  document.querySelector('form').onsubmit = function (event) {
    // event.preventDefault() // stop the submission
    // Save in the hidden input "description" the content of the ql editor
    document.querySelector('form input[name="description"]').value = document.querySelector('.ql-editor').innerHTML
  }
</script>